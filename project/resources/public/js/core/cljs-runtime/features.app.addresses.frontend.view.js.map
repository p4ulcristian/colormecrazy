{"version":3,"sources":["features/app/addresses/frontend/view.cljs"],"mappings":"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","names":["features.app.addresses.frontend.view/get-workspace-id","cljs.core/deref","router-state","router.frontend.zero/state","workspace-id","cljs.core.get_in","cljs.core.println","features.app.addresses.frontend.view/load-addresses-query","loading?","addresses","params","cljs.core/reset!","parquery.frontend.request/send-queries","response","result","features.app.addresses.frontend.view/get-query-type","is-new?","features.app.addresses.frontend.view/prepare-address-data","address","cljs.core.dissoc","features.app.addresses.frontend.view/handle-save-response","query-type","callback","modal-address","load-addresses","cljs.core.get","js/alert","features.app.addresses.frontend.view/save-address-query","modal-is-new?","address-data","context","features.app.addresses.frontend.view/delete-address-query","address-id","features.app.addresses.frontend.view/validate-name","name","clojure.string/trim","features.app.addresses.frontend.view/validate-address-line1","address-line1","features.app.addresses.frontend.view/validate-city","city","features.app.addresses.frontend.view/validate-postal-code","postal-code","features.app.addresses.frontend.view/validate-address","errors","G__36060","cljs.core.assoc","translations.core/tr","features.app.addresses.frontend.view/field-label","label","field-key","has-error?","fexpr__36067","p1__36068#","features.app.addresses.frontend.view/input-base-props","attrs","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.merge","features.app.addresses.frontend.view/render-textarea","features.app.addresses.frontend.view/render-text-input","features.app.addresses.frontend.view/field-input","cljs.core._EQ_","features.app.addresses.frontend.view/field-error","error-msg","features.app.addresses.frontend.view/form-field","cljs.core/contains?","features.app.addresses.frontend.view/elevators-field","new-elevator","reagent.core.atom","p1__36115#","elevators","or__5025__auto__","add-elevator","elevator-id","and__5023__auto__","cljs.core/not","p1__36103#","cljs.core/some","cljs.core.conj","remove-elevator","index","cljs.core/vec","cljs.core.concat","cljs.core.take","cljs.core.drop","cljs.core/seq","iter__5503__auto__","s__36125","cljs.core/LazySeq","temp__5823__auto__","cljs.core/chunked-seq?","c__5501__auto__","size__5502__auto__","cljs.core/count","b__36127","cljs.core/chunk-buffer","i__36126","vec__36141","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__36124","cljs.core/chunk-rest","vec__36159","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.map_indexed","cljs.core/vector","cljs.core/empty?","features.app.addresses.frontend.view/form-fields","features.app.addresses.frontend.view/handle-save-click","on-save","validation-errors","G__36182","G__36183","features.app.addresses.frontend.view/address-modal","on-cancel","ui.modal/modal","ui.modal/modal-header","ui.modal/modal-footer","ui.enhanced-button/enhanced-button","features.app.addresses.frontend.view/address-name-render","row","features.app.addresses.frontend.view/elevators-render","s__36257","b__36259","i__36258","iter__36256","elevator","features.app.addresses.frontend.view/contact-render","contact-person","features.app.addresses.frontend.view/addresses-table","on-edit","on-delete","query-fn","ui.data-table/server-side-data-table","js/confirm","G__36287","features.app.addresses.frontend.view/addresses-page-header","ui.page-header/page-header","features.app.addresses.frontend.view/addresses-content","delete-address","features.app.addresses.frontend.view/modal-when-open","save-address","features.app.addresses.frontend.view/view","cljs.core/chunk-first"],"sourcesContent":["(ns features.app.addresses.frontend.view\n  (:require [reagent.core :as r]\n            [clojure.string :as str]\n            [parquery.frontend.request :as parquery]\n            [router.frontend.zero :as router]\n            [zero.frontend.re-frame]\n            [zero.frontend.react :as zero-react]\n            [ui.modal :as modal]\n            [ui.form-field :as form-field]\n            [ui.data-table :as data-table]\n            [ui.enhanced-button :as enhanced-button]\n            [ui.page-header :as page-header]\n            [translations.core :as tr]))\n\n(defn- get-workspace-id\n  \"Get workspace ID from router parameters\"\n  []\n  (let [router-state @router/state\n        workspace-id (get-in router-state [:parameters :path :workspace-id])]\n    (println \"DEBUG: get-workspace-id called\")\n    (println \"  Router state:\" router-state)\n    (println \"  Extracted workspace-id:\" workspace-id)\n    workspace-id))\n\n(defn- load-addresses-query\n  \"Execute ParQuery to load addresses with pagination\"\n  [workspace-id loading? addresses params]\n  (println \"DEBUG load-addresses-query called with params:\" params)\n  (reset! loading? true)\n  (parquery/send-queries\n   {:queries {:workspace-addresses/get-paginated params}\n    :parquery/context {:workspace-id workspace-id}\n    :callback (fn [response]\n               (println \"DEBUG load-addresses-query response:\" response)\n               (reset! loading? false)\n               (let [result (:workspace-addresses/get-paginated response)]\n                 (reset! addresses result)))}))\n\n(defn- get-query-type\n  \"Get appropriate query type for save operation\"\n  [is-new?]\n  (if @is-new? \n    :workspace-addresses/create \n    :workspace-addresses/update))\n\n(defn- prepare-address-data\n  \"Prepare address data for save\"\n  [address is-new?]\n  (if @is-new?\n    (dissoc address :address/id)\n    address))\n\n(defn- handle-save-response\n  \"Handle save response and update UI\"\n  [response query-type callback modal-address load-addresses]\n  (callback)\n  (if (:success (get response query-type))\n    (do (reset! modal-address nil)\n        (load-addresses))\n    (js/alert (str \"Error: \" (:error (get response query-type))))))\n\n(defn- save-address-query\n  \"Execute ParQuery to save address\"\n  [address workspace-id modal-is-new? callback modal-address load-addresses]\n  (let [query-type (get-query-type modal-is-new?)\n        address-data (prepare-address-data address modal-is-new?)\n        context {:workspace-id workspace-id}]\n    (println \"DEBUG: save-address-query called\")\n    (println \"  Workspace ID:\" workspace-id)\n    (println \"  Query type:\" query-type)\n    (println \"  Address data:\" address-data)\n    (println \"  Context being sent:\" context)\n    (parquery/send-queries\n     {:queries {query-type address-data}\n      :parquery/context context\n      :callback (fn [response]\n                 (println \"DEBUG: save-address-query response:\" response)\n                 (handle-save-response response query-type callback modal-address load-addresses))})))\n\n(defn- delete-address-query\n  \"Execute ParQuery to delete address\"\n  [address-id workspace-id load-addresses]\n  (parquery/send-queries\n   {:queries {:workspace-addresses/delete {:address/id address-id}}\n    :parquery/context {:workspace-id workspace-id}\n    :callback (fn [response]\n               (if (:success (:workspace-addresses/delete response))\n                 (load-addresses)\n                 (js/alert \"Error deleting address\")))}))\n\n(defn- validate-name\n  \"Validate address name\"\n  [name]\n  (< (count (str/trim (str name))) 2))\n\n(defn- validate-address-line1\n  \"Validate address line 1\"\n  [address-line1]\n  (< (count (str/trim (str address-line1))) 2))\n\n(defn- validate-city\n  \"Validate city\"\n  [city]\n  (< (count (str/trim (str city))) 2))\n\n(defn- validate-postal-code\n  \"Validate postal code\"\n  [postal-code]\n  (< (count (str/trim (str postal-code))) 2))\n\n(defn validate-address\n  \"Validates address data and returns map of field errors\"\n  [address]\n  (let [errors {}\n        name (:address/name address)\n        address-line1 (:address/address-line1 address)\n        city (:address/city address)\n        postal-code (:address/postal-code address)]\n    (cond-> errors\n      (validate-name name) (assoc :address/name (tr/tr :addresses/error-name))\n      (validate-address-line1 address-line1) (assoc :address/address-line1 (tr/tr :addresses/error-address-line1))\n      (validate-city city) (assoc :address/city (tr/tr :addresses/error-city))\n      (validate-postal-code postal-code) (assoc :address/postal-code (tr/tr :addresses/error-postal-code)))))\n\n(defn- field-label [label field-key has-error?]\n  [:label {:style {:display \"block\" :margin-bottom \"0.5rem\" :font-weight \"600\"\n                   :font-size \"0.875rem\" :letter-spacing \"0.025em\"\n                   :color (if has-error? \"#dc3545\" \"#374151\")}}\n   label \n   (when (#{:address/name :address/address-line1 :address/city :address/postal-code} field-key) \n     [:span {:style {:color \"#ef4444\" :margin-left \"0.25rem\"}} \"*\"])])\n\n(defn- input-base-props\n  \"Base properties for input fields\"\n  [field-key address has-error? attrs]\n  {:value (str (get @address field-key \"\"))\n   :on-change #(swap! address assoc field-key (.. % -target -value))\n   :style (merge {:width \"100%\"\n                  :padding \"0.75rem 1rem\"\n                  :border (if has-error? \"2px solid #dc3545\" \"1px solid #d1d5db\")\n                  :border-radius \"8px\"\n                  :font-size \"1rem\"\n                  :line-height \"1.5\"\n                  :transition \"border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out\"\n                  :box-shadow (if has-error? \n                                \"0 0 0 3px rgba(220, 53, 69, 0.1)\" \n                                \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\")\n                  :outline \"none\"}\n                 (:style attrs)\n                 {:focus {:border-color (if has-error? \"#dc3545\" \"#3b82f6\")\n                         :box-shadow (if has-error? \n                                       \"0 0 0 3px rgba(220, 53, 69, 0.1)\"\n                                       \"0 0 0 3px rgba(59, 130, 246, 0.1)\")}})})\n\n(defn- render-textarea\n  \"Render textarea input\"\n  [field-key address has-error? attrs]\n  [:textarea (merge (dissoc attrs :type) (input-base-props field-key address has-error? attrs))])\n\n(defn- render-text-input\n  \"Render text input\"\n  [field-key address has-error? attrs]\n  [:input (merge attrs (input-base-props field-key address has-error? attrs))])\n\n(defn- field-input\n  \"Render appropriate input type\"\n  [field-key address has-error? attrs]\n  (if (= (:type attrs) \"textarea\")\n    (render-textarea field-key address has-error? attrs)\n    (render-text-input field-key address has-error? attrs)))\n\n(defn- field-error [error-msg]\n  (when error-msg\n    [:div {:style {:color \"#dc3545\" :font-size \"0.875rem\" :margin-top \"0.25rem\"}}\n     error-msg]))\n\n(defn- form-field\n  \"Complete form field with label, input and error\"\n  [label field-key address errors attrs]\n  (let [has-error? (contains? errors field-key)]\n    [:div {:style {:margin-bottom \"1.5rem\"}}\n     [field-label label field-key has-error?]\n     [field-input field-key address has-error? attrs]\n     [field-error (get errors field-key)]]))\n\n(defn- elevators-field\n  \"Field for managing elevators list\"\n  [address errors]\n  (let [new-elevator (r/atom \"\")]\n    (fn [address errors]\n      (let [elevators (or (:address/elevators @address) [])\n            add-elevator (fn [elevator-id]\n                          (when (and elevator-id (not (some #(= % elevator-id) elevators)))\n                            (swap! address assoc :address/elevators (conj elevators elevator-id))))\n            remove-elevator (fn [index]\n                             (swap! address assoc :address/elevators \n                                   (vec (concat (take index elevators) \n                                               (drop (inc index) elevators)))))]\n        [:div {:style {:margin-bottom \"1.5rem\"}}\n         [:label {:style {:display \"block\" :margin-bottom \"0.5rem\" :font-weight \"600\"\n                          :font-size \"0.875rem\" :letter-spacing \"0.025em\" :color \"#374151\"}}\n          (tr/tr :addresses/elevators)]\n         \n         ;; List of current elevators\n         (when (seq elevators)\n           [:div {:style {:margin-bottom \"1rem\"}}\n            (for [[index elevator-id] (map-indexed vector elevators)]\n              ^{:key (str \"elevator-\" index)}\n              [:div {:style {:display \"flex\" :align-items \"center\" :margin-bottom \"0.5rem\"\n                             :padding \"0.5rem\" :background \"#f9fafb\" :border-radius \"6px\"}}\n               [:span {:style {:flex \"1\" :color \"#374151\" :font-size \"0.875rem\"}}\n                (str (tr/tr :addresses/elevator-prefix) elevator-id)]\n               [:button {:type \"button\"\n                         :on-click #(remove-elevator index)\n                         :style {:color \"#dc3545\" :background \"none\" :border \"none\"\n                                :cursor \"pointer\" :padding \"0.25rem\" :font-size \"0.75rem\"\n                                :border-radius \"4px\"}}\n                (tr/tr :addresses/remove)]])])\n         \n         ;; Add new elevator input\n         [:div {:style {:display \"flex\" :gap \"0.5rem\" :align-items \"flex-end\"}}\n          [:div {:style {:flex \"1\"}}\n           [:input {:type \"text\"\n                    :placeholder (tr/tr :addresses/elevator-placeholder)\n                    :value @new-elevator\n                    :on-change #(reset! new-elevator (.. % -target -value))\n                    :style {:width \"100%\" :padding \"0.75rem 1rem\" :border \"1px solid #d1d5db\"\n                            :border-radius \"8px\" :font-size \"1rem\"}}]]\n          [:button {:type \"button\"\n                    :on-click #(do (add-elevator @new-elevator) \n                                  (reset! new-elevator \"\"))\n                    :disabled (empty? (str/trim @new-elevator))\n                    :style {:padding \"0.75rem 1.5rem\" :background \"#10b981\" :color \"white\"\n                            :border \"none\" :border-radius \"8px\" :font-size \"0.875rem\"\n                            :cursor (if (empty? (str/trim @new-elevator)) \"not-allowed\" \"pointer\")\n                            :opacity (if (empty? (str/trim @new-elevator)) \"0.5\" \"1\")}}\n           (tr/tr :addresses/add-elevator)]]\n         \n         [:p {:style {:color \"#6b7280\" :font-size \"0.75rem\" :margin-top \"0.5rem\"}}\n          (tr/tr :addresses/elevator-description)]]))))\n\n(defn- form-fields\n  \"All form input fields\"\n  [address errors]\n  [:div\n   [form-field (tr/tr :addresses/name) :address/name address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/name-placeholder)}]\n   [form-field (tr/tr :addresses/address-line1) :address/address-line1 address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/address-line1-placeholder)}]\n   [form-field (tr/tr :addresses/address-line2) :address/address-line2 address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/address-line2-placeholder)}]\n   [form-field (tr/tr :addresses/city) :address/city address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/city-placeholder)}]\n   [form-field (tr/tr :addresses/postal-code) :address/postal-code address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/postal-code-placeholder)}]\n   [form-field (tr/tr :addresses/country) :address/country address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/country-placeholder)}]\n   [form-field (tr/tr :addresses/contact-person) :address/contact-person address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/contact-person-placeholder)}]\n   [form-field (tr/tr :addresses/contact-phone) :address/contact-phone address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/contact-phone-placeholder)}]\n   [form-field (tr/tr :addresses/contact-email) :address/contact-email address errors\n    {:type \"text\" :placeholder (tr/tr :addresses/contact-email-placeholder)}]\n   [elevators-field address errors]])\n\n(defn- handle-save-click\n  \"Handle save button click with validation\"\n  [address loading? errors on-save]\n  (let [validation-errors (validate-address @address)]\n    (if (empty? validation-errors)\n      (do (reset! loading? true)\n          (reset! errors {})\n          (on-save @address (fn [] (reset! loading? false))))\n      (reset! errors validation-errors))))\n\n(defn address-modal\n  \"Modal for creating/editing addresses using new UI components\"\n  [address-data is-new? on-save on-cancel]\n  (let [loading? (r/atom false)\n        errors (r/atom {})\n        address (r/atom address-data)]\n    (fn [address-data is-new? on-save on-cancel]\n      (reset! address address-data)\n      [modal/modal {:on-close on-cancel :close-on-backdrop? true}\n       ^{:key \"header\"} [modal/modal-header\n        {:title (if is-new? (tr/tr :addresses/modal-add-title) (tr/tr :addresses/modal-edit-title))\n         :subtitle (if is-new? \n                     (tr/tr :addresses/modal-add-subtitle)\n                     (tr/tr :addresses/modal-edit-subtitle))}]\n       ^{:key \"form\"} [form-fields address @errors]\n       ^{:key \"footer\"} [modal/modal-footer\n        ^{:key \"cancel\"} [enhanced-button/enhanced-button\n         {:variant :secondary\n          :on-click on-cancel\n          :text (tr/tr :addresses/cancel)}]\n        ^{:key \"save\"} [enhanced-button/enhanced-button\n         {:variant :primary\n          :loading? @loading?\n          :on-click #(handle-save-click address loading? errors on-save)\n          :text (if @loading? (tr/tr :addresses/saving) (tr/tr :addresses/save-address))}]]])))\n\n(defn- address-name-render\n  \"Custom render function for address name column with full address\"\n  [name row]\n  [:div \n   [:div {:style {:font-weight \"600\" :color \"#111827\" :font-size \"0.875rem\"}}\n    name]\n   [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\" :margin-top \"0.25rem\" :line-height \"1.4\"}}\n    (str (:address/address-line1 row)\n         (when (:address/address-line2 row) (str \", \" (:address/address-line2 row)))\n         \", \" (:address/city row) \" \" (:address/postal-code row))]\n   \n])\n\n(defn- elevators-render\n  \"Custom render function for elevators column\"\n  [elevators row]\n  [:div\n   (if (seq elevators)\n     (for [elevator elevators]\n       ^{:key (str \"table-elevator-\" elevator)}\n       [:span {:style {:display \"inline-block\" :margin-right \"0.5rem\" :margin-bottom \"0.25rem\"\n                       :padding \"0.25rem 0.5rem\" :background \"#e0f2fe\" :color \"#0891b2\"\n                       :border-radius \"12px\" :font-size \"0.75rem\" :font-weight \"500\"}}\n        (str \"\ud83c\udfe2 \" elevator)])\n     [:span {:style {:color \"#9ca3af\" :font-style \"italic\" :font-size \"0.75rem\"}}\n      (tr/tr :addresses/no-elevators)])])\n\n(defn- contact-render\n  \"Custom render function for contact info\"\n  [contact-person row]\n  [:div\n   (when contact-person\n     [:div {:style {:color \"#374151\" :font-size \"0.875rem\" :font-weight \"500\"}}\n      contact-person])\n   (when (:address/contact-phone row)\n     [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\"}}\n      (:address/contact-phone row)])\n   (when (:address/contact-email row)\n     [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\"}}\n      (:address/contact-email row)])])\n\n(defn addresses-table\n  \"Addresses table using server-side data-table component with search, sorting, and pagination\"\n  [addresses loading? on-edit on-delete query-fn]\n  [data-table/server-side-data-table\n   {:headers [{:key :address/name :label (tr/tr :addresses/table-header-address) :render address-name-render :sortable? true}\n              {:key :address/elevators :label (tr/tr :addresses/table-header-elevators) :render elevators-render :sortable? false}\n              {:key :address/contact-person :label (tr/tr :addresses/table-header-contact) :render contact-render :sortable? true}\n              {:key :address/city :label (tr/tr :addresses/table-header-city) :sortable? true}\n              {:key :address/country :label (tr/tr :addresses/table-header-country) :sortable? true}]\n    :data-source @addresses\n    :loading? @loading?\n    :empty-message (tr/tr :addresses/no-addresses-found)\n    :id-key :address/id\n    :table-id :addresses-table\n    :show-search? true\n    :show-pagination? true\n    :query-fn query-fn\n    :on-data-change (fn [result] (reset! addresses result))\n    :actions [{:key :edit :label (tr/tr :addresses/action-edit) :variant :primary :on-click on-edit}\n              {:key :delete :label (tr/tr :addresses/action-delete) :variant :danger \n               :on-click (fn [row] \n                          (when (js/confirm (tr/tr :addresses/confirm-delete))\n                            (on-delete (:address/id row))))}]}])\n\n(defn- addresses-page-header\n  \"Page header with title and add button using new UI component\"\n  [modal-address modal-is-new?]\n  [page-header/page-header\n   {:title (tr/tr :addresses/page-title)\n    :description (tr/tr :addresses/page-description)\n    :action-button [enhanced-button/enhanced-button\n                    {:variant :success\n                     :on-click (fn [] \n                                (reset! modal-address {:address/country \"Hungary\"\n                                                      :address/elevators []})\n                                (reset! modal-is-new? true))\n                     :text (tr/tr :addresses/add-new-address)}]}])\n\n(defn- addresses-content\n  \"Main content area with server-side data table\"\n  [addresses loading? modal-address modal-is-new? delete-address query-fn]\n  [addresses-table \n   addresses \n   loading?\n   (fn [address]\n     (reset! modal-address address)\n     (reset! modal-is-new? false))\n   delete-address\n   query-fn])\n\n(defn- modal-when-open\n  \"Render modal when address is selected\"\n  [modal-address modal-is-new? save-address]\n  (when @modal-address\n    [address-modal @modal-address @modal-is-new? save-address\n     (fn [] (reset! modal-address nil))]))\n\n(defn view []\n  (let [workspace-id (get-workspace-id)\n        addresses (r/atom [])\n        loading? (r/atom false)\n        modal-address (r/atom nil)\n        modal-is-new? (r/atom false)\n        \n        load-addresses (fn [params]\n                        (load-addresses-query workspace-id loading? addresses (or params {})))\n        \n        save-address (fn [address callback]\n                       (save-address-query address workspace-id modal-is-new? \n                                          callback modal-address (fn [] (load-addresses {}))))\n        \n        delete-address (fn [address-id]\n                         (delete-address-query address-id workspace-id (fn [] (load-addresses {}))))]\n    \n    (fn []\n      ;; Load addresses on component mount (authentication handled by backend)  \n      [:div {:style {:min-height \"100vh\" :background \"#f9fafb\"}}\n       [:div {:style {:max-width \"1200px\" :margin \"0 auto\" :padding \"2rem\"}}\n        [addresses-page-header modal-address modal-is-new?]\n        [addresses-content addresses loading? modal-address modal-is-new? delete-address load-addresses]\n        [modal-when-open modal-address modal-is-new? save-address]]])))"]}
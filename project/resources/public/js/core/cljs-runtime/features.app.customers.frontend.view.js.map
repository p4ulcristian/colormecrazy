{"version":3,"sources":["features/app/customers/frontend/view.cljs"],"mappings":"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","names":["G__38698","G__38699","zero.frontend.re-frame/reg-sub","db","_","cljs.core.get_in","G__38718","G__38719","G__38726","G__38727","G__38728","G__38729","G__38730","G__38731","G__38732","G__38733","G__38734","G__38735","G__38736","G__38737","zero.frontend.re-frame/reg-event-db","p__38738","vec__38739","cljs.core.nth","loading?","cljs.core/assoc-in","G__38742","G__38743","p__38744","vec__38745","data","G__38748","G__38749","p__38750","vec__38751","customer","is-new?","G__38755","G__38756","G__38758","G__38759","p__38760","vec__38761","field-key","value","G__38766","G__38767","p__38768","vec__38769","errors","G__38772","G__38773","p__38774","vec__38775","customer-data","or__5025__auto__","G__38778","G__38779","p__38780","vec__38781","features.app.customers.frontend.view/get-workspace-id","cljs.core/deref","router-state","router.frontend.zero/state","workspace-id","cljs.core.println","features.app.customers.frontend.view/load-customers-query","params","G__38784","zero.frontend.re-frame/dispatch","parquery.frontend.request/send-queries","response","result","G__38785","features.app.customers.frontend.view/save-customer-query","callback","load-customers","query-type","cljs.core.dissoc","context","cljs.core.get","G__38800","js/alert","features.app.customers.frontend.view/delete-customer-query","customer-id","features.app.customers.frontend.view/validate-name","name","clojure.string/trim","features.app.customers.frontend.view/validate-email","email","and__5023__auto__","cljs.core/seq","email-regex","cljs.core/not","cljs.core/re-matches","features.app.customers.frontend.view/validate-customer","G__38846","cljs.core.assoc","translations.core/tr","features.app.customers.frontend.view/field-label","label","has-error?","fexpr__38876","p1__38877#","features.app.customers.frontend.view/input-base-props","form-data","attrs","G__38880","cljs.core.merge","features.app.customers.frontend.view/render-textarea","features.app.customers.frontend.view/render-text-input","features.app.customers.frontend.view/field-input","cljs.core._EQ_","features.app.customers.frontend.view/field-error","error-msg","features.app.customers.frontend.view/form-field","cljs.core/contains?","features.app.customers.frontend.view/form-fields","features.app.customers.frontend.view/handle-save-click","on-save","validation-errors","cljs.core/empty?","G__38891","G__38892","G__38893","G__38894","G__38896","G__38898","features.app.customers.frontend.view/customer-modal","on-cancel","G__38912","zero.frontend.re-frame/subscribe","G__38913","G__38914","G__38919","ui.modal/modal","ui.modal/modal-header","ui.modal/modal-footer","ui.enhanced-button/enhanced-button","features.app.customers.frontend.view/customer-name-render","row","features.app.customers.frontend.view/contact-render","contact-person","features.app.customers.frontend.view/status-render","active","features.app.customers.frontend.view/customers-table","customers","on-edit","on-delete","query-fn","ui.data-table/server-side-data-table","G__38993","js/confirm","G__38992","features.app.customers.frontend.view/customers-page-header","ui.page-header/page-header","G__38994","features.app.customers.frontend.view/customers-content","delete-customer","G__38997","features.app.customers.frontend.view/modal-when-open","save-customer","modal-customer","G__38998","modal-is-new?","G__38999","G__39001","features.app.customers.frontend.view/view","customers-data","G__39002","G__39004","G__39006"],"sourcesContent":["(ns features.app.customers.frontend.view\n  (:require [reagent.core :as r]\n            [clojure.string :as str]\n            [parquery.frontend.request :as parquery]\n            [router.frontend.zero :as router]\n            [zero.frontend.re-frame :as rf]\n            [zero.frontend.react :as zero-react]\n            [ui.modal :as modal]\n            [ui.form-field :as form-field]\n            [ui.data-table :as data-table]\n            [ui.enhanced-button :as enhanced-button]\n            [ui.page-header :as page-header]\n            [translations.core :as tr]))\n\n;; Re-frame subscriptions\n(rf/reg-sub\n  :customers/data\n  (fn [db _]\n    (get-in db [:customers :data] {:customers [] :pagination {}})))\n\n(rf/reg-sub\n  :customers/loading?\n  (fn [db _]\n    (get-in db [:customers :loading?] false)))\n\n(rf/reg-sub\n  :customers/modal-customer\n  (fn [db _]\n    (get-in db [:customers :modal-customer] nil)))\n\n(rf/reg-sub\n  :customers/modal-is-new?\n  (fn [db _]\n    (get-in db [:customers :modal-is-new?] false)))\n\n(rf/reg-sub\n  :customers/modal-form\n  (fn [db _]\n    (get-in db [:customers :modal-form] {})))\n\n(rf/reg-sub\n  :customers/modal-errors\n  (fn [db _]\n    (get-in db [:customers :modal-errors] {})))\n\n(rf/reg-sub\n  :customers/modal-loading?\n  (fn [db _]\n    (get-in db [:customers :modal-loading?] false)))\n\n;; Re-frame events\n(rf/reg-event-db\n  :customers/set-loading\n  (fn [db [_ loading?]]\n    (assoc-in db [:customers :loading?] loading?)))\n\n(rf/reg-event-db\n  :customers/load-success\n  (fn [db [_ data]]\n    (-> db\n        (assoc-in [:customers :data] data)\n        (assoc-in [:customers :loading?] false))))\n\n(rf/reg-event-db\n  :customers/open-modal\n  (fn [db [_ customer is-new?]]\n    (-> db\n        (assoc-in [:customers :modal-customer] customer)\n        (assoc-in [:customers :modal-is-new?] is-new?))))\n\n(rf/reg-event-db\n  :customers/close-modal\n  (fn [db _]\n    (-> db\n        (assoc-in [:customers :modal-customer] nil)\n        (assoc-in [:customers :modal-is-new?] false)\n        (assoc-in [:customers :modal-form] {})\n        (assoc-in [:customers :modal-errors] {}))))\n\n(rf/reg-event-db\n  :customers/update-form-field\n  (fn [db [_ field-key value]]\n    (assoc-in db [:customers :modal-form field-key] value)))\n\n(rf/reg-event-db\n  :customers/set-form-errors\n  (fn [db [_ errors]]\n    (assoc-in db [:customers :modal-errors] errors)))\n\n(rf/reg-event-db\n  :customers/init-form\n  (fn [db [_ customer-data]]\n    (assoc-in db [:customers :modal-form] (or customer-data {}))))\n\n(rf/reg-event-db\n  :customers/set-modal-loading\n  (fn [db [_ loading?]]\n    (assoc-in db [:customers :modal-loading?] loading?)))\n\n(defn- get-workspace-id\n  \"Get workspace ID from router parameters\"\n  []\n  (let [router-state @router/state\n        workspace-id (get-in router-state [:parameters :path :workspace-id])]\n    (println \"DEBUG: get-workspace-id called\")\n    (println \"  Router state:\" router-state)\n    (println \"  Extracted workspace-id:\" workspace-id)\n    workspace-id))\n\n(defn- load-customers-query\n  \"Execute ParQuery to load customers with pagination\"\n  [workspace-id params]\n  (println \"DEBUG load-customers-query called with params:\" params)\n  (rf/dispatch [:customers/set-loading true])\n  (parquery/send-queries\n   {:queries {:workspace-customers/get-paginated params}\n    :parquery/context {:workspace-id workspace-id}\n    :callback (fn [response]\n               (println \"DEBUG load-customers-query response:\" response)\n               (let [result (:workspace-customers/get-paginated response)]\n                 (rf/dispatch [:customers/load-success result])))}))\n\n\n(defn- save-customer-query\n  \"Execute ParQuery to save customer\"\n  [customer workspace-id is-new? callback load-customers]\n  (let [query-type (if is-new? :workspace-customers/create :workspace-customers/update)\n        customer-data (if is-new? (dissoc customer :customer/id) customer)\n        context {:workspace-id workspace-id}]\n    (println \"DEBUG: save-customer-query called\")\n    (println \"  Workspace ID:\" workspace-id)\n    (println \"  Query type:\" query-type)\n    (println \"  Customer data:\" customer-data)\n    (println \"  Context being sent:\" context)\n    (parquery/send-queries\n     {:queries {query-type customer-data}\n      :parquery/context context\n      :callback (fn [response]\n                 (println \"DEBUG: save-customer-query response:\" response)\n                 (callback)\n                 (if (:success (get response query-type))\n                   (do (rf/dispatch [:customers/close-modal])\n                       (load-customers))\n                   (js/alert (str \"Error: \" (:error (get response query-type))))))})))\n\n(defn- delete-customer-query\n  \"Execute ParQuery to delete customer\"\n  [customer-id workspace-id load-customers]\n  (parquery/send-queries\n   {:queries {:workspace-customers/delete {:customer/id customer-id}}\n    :parquery/context {:workspace-id workspace-id}\n    :callback (fn [response]\n               (if (:success (:workspace-customers/delete response))\n                 (load-customers)\n                 (js/alert \"Error deleting customer\")))}))\n\n(defn- validate-name\n  \"Validate customer name\"\n  [name]\n  (< (count (str/trim (str name))) 2))\n\n(defn- validate-email\n  \"Validate email format\"\n  [email]\n  (when (and email (seq (str/trim (str email))))\n    (let [email-regex #\"^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$\"]\n      (not (re-matches email-regex (str/trim (str email)))))))\n\n(defn validate-customer\n  \"Validates customer data and returns map of field errors\"\n  [customer]\n  (let [errors {}\n        name (:customer/name customer)\n        email (:customer/email customer)]\n    (cond-> errors\n      (validate-name name) (assoc :customer/name (tr/tr :customers/error-name))\n      (validate-email email) (assoc :customer/email (tr/tr :customers/error-email)))))\n\n(defn- field-label [label field-key has-error?]\n  [:label {:style {:display \"block\" :margin-bottom \"0.5rem\" :font-weight \"600\"\n                   :font-size \"0.875rem\" :letter-spacing \"0.025em\"\n                   :color (if has-error? \"#dc3545\" \"#374151\")}}\n   label \n   (when (#{:customer/name} field-key) \n     [:span {:style {:color \"#ef4444\" :margin-left \"0.25rem\"}} \"*\"])])\n\n(defn- input-base-props\n  \"Base properties for input fields\"\n  [field-key form-data has-error? attrs]\n  {:value (str (get form-data field-key \"\"))\n   :on-change #(rf/dispatch [:customers/update-form-field field-key (.. % -target -value)])\n   :style (merge {:width \"100%\"\n                  :padding \"0.75rem 1rem\"\n                  :border (if has-error? \"2px solid #dc3545\" \"1px solid #d1d5db\")\n                  :border-radius \"8px\"\n                  :font-size \"1rem\"\n                  :line-height \"1.5\"\n                  :transition \"border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out\"\n                  :box-shadow (if has-error? \n                                \"0 0 0 3px rgba(220, 53, 69, 0.1)\" \n                                \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\")\n                  :outline \"none\"}\n                 (:style attrs)\n                 {:focus {:border-color (if has-error? \"#dc3545\" \"#3b82f6\")\n                         :box-shadow (if has-error? \n                                       \"0 0 0 3px rgba(220, 53, 69, 0.1)\"\n                                       \"0 0 0 3px rgba(59, 130, 246, 0.1)\")}})})\n\n(defn- render-textarea\n  \"Render textarea input\"\n  [field-key form-data has-error? attrs]\n  [:textarea (merge (dissoc attrs :type) (input-base-props field-key form-data has-error? attrs))])\n\n(defn- render-text-input\n  \"Render text input\"\n  [field-key form-data has-error? attrs]\n  [:input (merge attrs (input-base-props field-key form-data has-error? attrs))])\n\n(defn- field-input\n  \"Render appropriate input type\"\n  [field-key form-data has-error? attrs]\n  (if (= (:type attrs) \"textarea\")\n    (render-textarea field-key form-data has-error? attrs)\n    (render-text-input field-key form-data has-error? attrs)))\n\n(defn- field-error [error-msg]\n  (when error-msg\n    [:div {:style {:color \"#dc3545\" :font-size \"0.875rem\" :margin-top \"0.25rem\"}}\n     error-msg]))\n\n(defn- form-field\n  \"Complete form field with label, input and error\"\n  [label field-key form-data errors attrs]\n  (let [has-error? (contains? errors field-key)]\n    [:div {:style {:margin-bottom \"1.5rem\"}}\n     [field-label label field-key has-error?]\n     [field-input field-key form-data has-error? attrs]\n     [field-error (get errors field-key)]]))\n\n(defn- form-fields\n  \"All form input fields\"\n  [form-data errors]\n  [:div\n   [form-field (tr/tr :customers/name) :customer/name form-data errors\n    {:type \"text\" :placeholder (tr/tr :customers/name-placeholder)}]\n   [form-field (tr/tr :customers/email) :customer/email form-data errors\n    {:type \"email\" :placeholder (tr/tr :customers/email-placeholder)}]\n   [form-field (tr/tr :customers/phone) :customer/phone form-data errors\n    {:type \"text\" :placeholder (tr/tr :customers/phone-placeholder)}]\n   [form-field (tr/tr :customers/contact-person) :customer/contact-person form-data errors\n    {:type \"text\" :placeholder (tr/tr :customers/contact-person-placeholder)}]\n   [form-field (tr/tr :customers/notes) :customer/notes form-data errors\n    {:type \"textarea\" :placeholder (tr/tr :customers/notes-placeholder)}]])\n\n(defn- handle-save-click\n  \"Handle save button click with validation\"\n  [form-data is-new? on-save]\n  (let [validation-errors (validate-customer form-data)]\n    (if (empty? validation-errors)\n      (do (rf/dispatch [:customers/set-form-errors {}])\n          (rf/dispatch [:customers/set-modal-loading true])\n          (on-save form-data (fn [] (rf/dispatch [:customers/set-modal-loading false]))))\n      (rf/dispatch [:customers/set-form-errors validation-errors]))))\n\n(defn customer-modal\n  \"Modal for creating/editing customers using new UI components\"\n  [customer-data is-new? on-save on-cancel]\n  (let [form-data (rf/subscribe [:customers/modal-form])\n        errors (rf/subscribe [:customers/modal-errors])\n        loading? (rf/subscribe [:customers/modal-loading?])]\n    ;; Initialize form when modal opens\n    (rf/dispatch [:customers/init-form customer-data])\n    (fn [customer-data is-new? on-save on-cancel]\n      [modal/modal {:on-close on-cancel :close-on-backdrop? true}\n       ^{:key \"header\"} [modal/modal-header\n        {:title (if is-new? (tr/tr :customers/modal-add-title) (tr/tr :customers/modal-edit-title))\n         :subtitle (if is-new? \n                     (tr/tr :customers/modal-add-subtitle)\n                     (tr/tr :customers/modal-edit-subtitle))}]\n       ^{:key \"form\"} [form-fields @form-data @errors]\n       ^{:key \"footer\"} [modal/modal-footer\n        ^{:key \"cancel\"} [enhanced-button/enhanced-button\n         {:variant :secondary\n          :on-click on-cancel\n          :text (tr/tr :customers/cancel)}]\n        ^{:key \"save\"} [enhanced-button/enhanced-button\n         {:variant :primary\n          :loading? @loading?\n          :on-click #(handle-save-click @form-data is-new? on-save)\n          :text (if @loading? (tr/tr :customers/saving) (tr/tr :customers/save-customer))}]]])))\n\n(defn- customer-name-render\n  \"Custom render function for customer name column\"\n  [name row]\n  [:div \n   [:div {:style {:font-weight \"600\" :color \"#111827\" :font-size \"0.875rem\"}}\n    name]\n   (when (:customer/email row)\n     [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\" :margin-top \"0.25rem\" :line-height \"1.4\"}}\n      (:customer/email row)])])\n\n(defn- contact-render\n  \"Custom render function for contact info\"\n  [contact-person row]\n  [:div\n   (when contact-person\n     [:div {:style {:color \"#374151\" :font-size \"0.875rem\" :font-weight \"500\"}}\n      contact-person])\n   (when (:customer/phone row)\n     [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\"}}\n      (:customer/phone row)])])\n\n(defn- status-render\n  \"Custom render function for active status\"\n  [active row]\n  [:span {:style {:display \"inline-block\"\n                  :padding \"0.25rem 0.75rem\"\n                  :border-radius \"12px\"\n                  :font-size \"0.75rem\"\n                  :font-weight \"500\"\n                  :background (if active \"#dcfce7\" \"#fef2f2\")\n                  :color (if active \"#15803d\" \"#dc2626\")}}\n   (if active (tr/tr :customers/status-active) (tr/tr :customers/status-inactive))])\n\n(defn customers-table\n  \"Customers table using server-side data-table component with search, sorting, and pagination\"\n  [customers loading? on-edit on-delete query-fn]\n  (println \"DEBUG: customers-table called with customers:\" @customers)\n  (println \"DEBUG: customers-table loading?:\" @loading?)\n  [:div\n   (str (:customers @customers))\n   [data-table/server-side-data-table\n    {:headers [{:key :customer/name :label (tr/tr :customers/table-header-customer) :render customer-name-render :sortable? true}\n               {:key :customer/contact-person :label (tr/tr :customers/table-header-contact) :render contact-render :sortable? true}\n               {:key :customer/active :label (tr/tr :customers/table-header-status) :render status-render :sortable? false}]\n     :data-source (or (:customers @customers) {})\n     :loading? @loading?\n     :empty-message (tr/tr :customers/no-customers-found)\n     :id-key :customer/id\n     :table-id :customers-table\n     :show-search? true\n     :show-pagination? true\n     :query-fn query-fn\n     :on-data-change (fn [result] (rf/dispatch [:customers/load-success result]))\n     :actions [{:key :edit :label (tr/tr :customers/action-edit) :variant :primary :on-click on-edit}\n               {:key :delete :label (tr/tr :customers/action-delete) :variant :danger \n                :on-click (fn [row] \n                            (when (js/confirm (tr/tr :customers/confirm-delete))\n                              (on-delete (:customer/id row))))}]}]])\n\n(defn- customers-page-header\n  \"Page header with title and add button using new UI component\"\n  []\n  [page-header/page-header\n   {:title (tr/tr :customers/page-title)\n    :description (tr/tr :customers/page-description)\n    :action-button [enhanced-button/enhanced-button\n                    {:variant :success\n                     :on-click (fn [] \n                                (rf/dispatch [:customers/open-modal {:customer/active true} true]))\n                     :text (tr/tr :customers/add-new-customer)}]}])\n\n(defn- customers-content\n  \"Main content area with server-side data table\"\n  [customers loading? delete-customer query-fn]\n  [customers-table \n   customers \n   loading?\n   (fn [customer]\n     (rf/dispatch [:customers/open-modal customer false]))\n   delete-customer\n   query-fn])\n\n(defn- modal-when-open\n  \"Render modal when customer is selected\"\n  [save-customer]\n  (let [modal-customer (rf/subscribe [:customers/modal-customer])\n        modal-is-new? (rf/subscribe [:customers/modal-is-new?])]\n    (when @modal-customer\n      [customer-modal @modal-customer @modal-is-new? save-customer\n       (fn [] (rf/dispatch [:customers/close-modal]))])))\n\n(defn view []\n  (let [workspace-id (get-workspace-id)\n        customers-data (rf/subscribe [:customers/data])\n        loading? (rf/subscribe [:customers/loading?])\n        modal-is-new? (rf/subscribe [:customers/modal-is-new?])\n        \n        load-customers (fn [params]\n                         (load-customers-query workspace-id (or params {})))\n        \n        save-customer (fn [customer callback]\n                        (save-customer-query customer workspace-id \n                                             @modal-is-new?\n                                             callback (fn [] (load-customers {}))))\n        \n        delete-customer (fn [customer-id]\n                          (delete-customer-query customer-id workspace-id (fn [] (load-customers {}))))]\n    \n    [:div {:style {:min-height \"100vh\" :background \"#f9fafb\"}}\n     [:div {:style {:max-width \"1200px\" :margin \"0 auto\" :padding \"2rem\"}}\n      [customers-page-header]\n      [customers-content customers-data loading? delete-customer load-customers]\n      [modal-when-open save-customer]]]))"]}
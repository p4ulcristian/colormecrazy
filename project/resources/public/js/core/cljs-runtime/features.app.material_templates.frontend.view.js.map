{"version":3,"sources":["features/app/material_templates/frontend/view.cljs"],"mappings":"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","names":["features.app.material-templates.frontend.view/get-workspace-id","cljs.core/deref","router-state","router.frontend.zero/state","workspace-id","cljs.core.get_in","features.app.material-templates.frontend.view/get-query-type","is-new?","features.app.material-templates.frontend.view/prepare-template-data","template","cljs.core.dissoc","features.app.material-templates.frontend.view/handle-save-response","response","query-type","callback","modal-template","load-templates","cljs.core.get","cljs.core/reset!","js/alert","features.app.material-templates.frontend.view/save-template-query","modal-is-new?","template-data","context","cljs.core.println","parquery.frontend.request/send-queries","features.app.material-templates.frontend.view/delete-template-query","template-id","features.app.material-templates.frontend.view/validate-name","name","clojure.string/trim","features.app.material-templates.frontend.view/validate-unit","unit","features.app.material-templates.frontend.view/validate-material-template","errors","G__38833","cljs.core.assoc","translations.core/tr","features.app.material-templates.frontend.view/field-label","label","field-key","has-error?","fexpr__38857","p1__38858#","features.app.material-templates.frontend.view/input-base-props","attrs","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.merge","features.app.material-templates.frontend.view/render-textarea","features.app.material-templates.frontend.view/render-text-input","features.app.material-templates.frontend.view/field-input","cljs.core._EQ_","features.app.material-templates.frontend.view/field-error","error-msg","features.app.material-templates.frontend.view/form-field","cljs.core/contains?","features.app.material-templates.frontend.view/form-fields","features.app.material-templates.frontend.view/handle-save-click","loading?","on-save","validation-errors","cljs.core/empty?","G__38873","G__38874","features.app.material-templates.frontend.view/material-template-modal","on-cancel","reagent.core.atom","ui.modal/modal","ui.modal/modal-header","ui.modal/modal-footer","ui.enhanced-button/enhanced-button","features.app.material-templates.frontend.view/template-name-render","row","features.app.material-templates.frontend.view/category-render","category","or__5025__auto__","features.app.material-templates.frontend.view/material-templates-table","templates-data","on-edit","on-delete","query-fn","ui.data-table/server-side-data-table","js/confirm","G__38884","features.app.material-templates.frontend.view/templates-page-header","ui.page-header/page-header","features.app.material-templates.frontend.view/templates-content","templates-data-atom","loading?-atom","delete-template","features.app.material-templates.frontend.view/modal-when-open","save-template","G__38899","G__38900","zero.frontend.re-frame/reg-sub","db","_","raw-data","and__5023__auto__","G__38905","G__38906","G__38910","G__38911","zero.frontend.re-frame/reg-event-db","p__38915","vec__38916","cljs.core.nth","cljs.core/assoc-in","G__38924","G__38925","p__38926","vec__38927","data","features.app.material-templates.frontend.view/view","params","result","formatted-result","zero.frontend.react/use-effect","features.app.material-templates.frontend.view/get-template-id","features.app.material-templates.frontend.view/load-individual-template","features.app.material-templates.frontend.view/individual-template-form","features.app.material-templates.frontend.view/individual-view","saving?","router.frontend.zero/navigate!","handle-save","handle-cancel"],"sourcesContent":["(ns features.app.material-templates.frontend.view\n  (:require [reagent.core :as r]\n            [clojure.string :as str]\n            [parquery.frontend.request :as parquery]\n            [router.frontend.zero :as router]\n            [zero.frontend.re-frame :as rf]\n            [zero.frontend.react :as zero-react]\n            [ui.modal :as modal]\n            [ui.form-field :as form-field]\n            [ui.data-table :as data-table]\n            [ui.enhanced-button :as enhanced-button]\n            [ui.page-header :as page-header]\n            [translations.core :as tr]))\n\n(defn- get-workspace-id\n  \"Get workspace ID from router parameters\"\n  []\n  (let [router-state @router/state\n        workspace-id (get-in router-state [:parameters :path :workspace-id])]\n    workspace-id))\n\n\n(defn- get-query-type\n  \"Get appropriate query type for save operation\"\n  [is-new?]\n  (if @is-new? \n    :workspace-material-templates/create \n    :workspace-material-templates/update))\n\n(defn- prepare-template-data\n  \"Prepare template data for save\"\n  [template is-new?]\n  (if @is-new?\n    (dissoc template :material-template/id)\n    template))\n\n(defn- handle-save-response\n  \"Handle save response and update UI\"\n  [response query-type callback modal-template load-templates]\n  (callback)\n  (if (:success (get response query-type))\n    (do (reset! modal-template nil)\n        (load-templates))\n    (js/alert (str \"Error: \" (:error (get response query-type))))))\n\n(defn- save-template-query\n  \"Execute ParQuery to save template\"\n  [template workspace-id modal-is-new? callback modal-template load-templates]\n  (let [query-type (get-query-type modal-is-new?)\n        template-data (prepare-template-data template modal-is-new?)\n        context {:workspace-id workspace-id}]\n    (println \"DEBUG: save-template-query called\")\n    (println \"  Workspace ID:\" workspace-id)\n    (println \"  Query type:\" query-type)\n    (println \"  Template data:\" template-data)\n    (println \"  Context being sent:\" context)\n    (parquery/send-queries\n     {:queries {query-type template-data}\n      :parquery/context context\n      :callback (fn [response]\n                 (println \"DEBUG: save-template-query response:\" response)\n                 (handle-save-response response query-type callback modal-template load-templates))})))\n\n(defn- delete-template-query\n  \"Execute ParQuery to delete template\"\n  [template-id workspace-id load-templates]\n  (parquery/send-queries\n   {:queries {:workspace-material-templates/delete {:material-template/id template-id}}\n    :parquery/context {:workspace-id workspace-id}\n    :callback (fn [response]\n               (if (:success (:workspace-material-templates/delete response))\n                 (load-templates)\n                 (js/alert \"Error deleting template\")))}))\n\n(defn- validate-name\n  \"Validate template name\"\n  [name]\n  (< (count (str/trim (str name))) 2))\n\n(defn- validate-unit\n  \"Validate template unit\"\n  [unit]\n  (< (count (str/trim (str unit))) 1))\n\n(defn validate-material-template\n  \"Validates material template data and returns map of field errors\"\n  [template]\n  (let [errors {}\n        name (:material-template/name template)\n        unit (:material-template/unit template)]\n    (cond-> errors\n      (validate-name name) (assoc :material-template/name (tr/tr :material-templates/error-name))\n      (validate-unit unit) (assoc :material-template/unit (tr/tr :material-templates/error-unit)))))\n\n(defn- field-label [label field-key has-error?]\n  [:label {:style {:display \"block\" :margin-bottom \"0.5rem\" :font-weight \"600\"\n                   :font-size \"0.875rem\" :letter-spacing \"0.025em\"\n                   :color (if has-error? \"#dc3545\" \"#374151\")}}\n   label \n   (when (#{:material-template/name :material-template/unit} field-key) \n     [:span {:style {:color \"#ef4444\" :margin-left \"0.25rem\"}} \"*\"])])\n\n(defn- input-base-props\n  \"Base properties for input fields\"\n  [field-key template has-error? attrs]\n  {:value (str (get @template field-key \"\"))\n   :on-change #(swap! template assoc field-key (.. % -target -value))\n   :style (merge {:width \"100%\"\n                  :padding \"0.75rem 1rem\"\n                  :border (if has-error? \"2px solid #dc3545\" \"1px solid #d1d5db\")\n                  :border-radius \"8px\"\n                  :font-size \"1rem\"\n                  :line-height \"1.5\"\n                  :transition \"border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out\"\n                  :box-shadow (if has-error? \n                                \"0 0 0 3px rgba(220, 53, 69, 0.1)\" \n                                \"0 1px 2px 0 rgba(0, 0, 0, 0.05)\")\n                  :outline \"none\"}\n                 (:style attrs)\n                 {:focus {:border-color (if has-error? \"#dc3545\" \"#3b82f6\")\n                         :box-shadow (if has-error? \n                                       \"0 0 0 3px rgba(220, 53, 69, 0.1)\"\n                                       \"0 0 0 3px rgba(59, 130, 246, 0.1)\")}})})\n\n(defn- render-textarea\n  \"Render textarea input\"\n  [field-key template has-error? attrs]\n  [:textarea (merge (dissoc attrs :type) (input-base-props field-key template has-error? attrs))])\n\n(defn- render-text-input\n  \"Render text input\"\n  [field-key template has-error? attrs]\n  [:input (merge attrs (input-base-props field-key template has-error? attrs))])\n\n(defn- field-input\n  \"Render appropriate input type\"\n  [field-key template has-error? attrs]\n  (if (= (:type attrs) \"textarea\")\n    (render-textarea field-key template has-error? attrs)\n    (render-text-input field-key template has-error? attrs)))\n\n(defn- field-error [error-msg]\n  (when error-msg\n    [:div {:style {:color \"#dc3545\" :font-size \"0.875rem\" :margin-top \"0.25rem\"}}\n     error-msg]))\n\n(defn- form-field\n  \"Complete form field with label, input and error\"\n  [label field-key template errors attrs]\n  (let [has-error? (contains? errors field-key)]\n    [:div {:style {:margin-bottom \"1.5rem\"}}\n     [field-label label field-key has-error?]\n     [field-input field-key template has-error? attrs]\n     [field-error (get errors field-key)]]))\n\n(defn- form-fields\n  \"All form input fields\"\n  [template errors]\n  [:div\n   [form-field (tr/tr :material-templates/name) :material-template/name template errors\n    {:type \"text\" :placeholder (tr/tr :material-templates/name-placeholder)}]\n   [form-field (tr/tr :material-templates/unit) :material-template/unit template errors\n    {:type \"text\" :placeholder (tr/tr :material-templates/unit-placeholder)}]\n   [form-field (tr/tr :material-templates/category) :material-template/category template errors\n    {:type \"text\" :placeholder (tr/tr :material-templates/category-placeholder)}]\n   [form-field (tr/tr :material-templates/description) :material-template/description template errors\n    {:type \"textarea\" :placeholder (tr/tr :material-templates/description-placeholder) :rows 3}]])\n\n\n(defn- handle-save-click\n  \"Handle save button click with validation\"\n  [template loading? errors on-save]\n  (let [validation-errors (validate-material-template @template)]\n    (if (empty? validation-errors)\n      (do (reset! loading? true)\n          (reset! errors {})\n          (on-save @template (fn [] (reset! loading? false))))\n      (reset! errors validation-errors))))\n\n\n(defn material-template-modal\n  \"Modal for creating/editing material templates using new UI components\"\n  [template-data is-new? on-save on-cancel]\n  (let [loading? (r/atom false)\n        errors (r/atom {})\n        template (r/atom template-data)]\n    (fn [template-data is-new? on-save on-cancel]\n      (reset! template template-data)\n      [modal/modal {:on-close on-cancel :close-on-backdrop? true}\n       ^{:key \"header\"} [modal/modal-header\n        {:title (if is-new? (tr/tr :material-templates/modal-add-title) (tr/tr :material-templates/modal-edit-title))\n         :subtitle (if is-new? \n                     (tr/tr :material-templates/modal-add-subtitle)\n                     (tr/tr :material-templates/modal-edit-subtitle))}]\n       ^{:key \"form\"} [form-fields template @errors]\n       ^{:key \"footer\"} [modal/modal-footer\n        ^{:key \"cancel\"} [enhanced-button/enhanced-button\n         {:variant :secondary\n          :on-click on-cancel\n          :text (tr/tr :material-templates/cancel)}]\n        ^{:key \"save\"} [enhanced-button/enhanced-button\n         {:variant :primary\n          :loading? @loading?\n          :on-click #(handle-save-click template loading? errors on-save)\n          :text (if @loading? (tr/tr :material-templates/saving) (tr/tr :material-templates/save-template))}]]])))\n\n(defn- template-name-render\n  \"Custom render function for template name column with description\"\n  [name row]\n  [:div \n   [:div {:style {:font-weight \"600\" :color \"#111827\" :font-size \"0.875rem\"}}\n    name]\n   (when (:material-template/description row)\n     [:div {:style {:color \"#6b7280\" :font-size \"0.75rem\" :margin-top \"0.25rem\" :line-height \"1.4\"}}\n      (:material-template/description row)])])\n\n(defn- category-render\n  \"Custom render function for category with fallback text\"\n  [category row]\n  (or category \n      [:span {:style {:color \"#9ca3af\" :font-style \"italic\"}} (tr/tr :material-templates/no-category)]))\n\n(defn material-templates-table\n  \"Material templates table using server-side data-table component with search, sorting, and pagination\"  \n  [templates-data loading? on-edit on-delete query-fn]\n  (println \"DEBUG: material-templates-table called\")\n  (println \"DEBUG: templates-data:\" templates-data)\n  (println \"DEBUG: loading?:\" loading?)\n  (println \"DEBUG: query-fn:\" query-fn)\n  [data-table/server-side-data-table\n   {:headers [{:key :material-template/name :label (tr/tr :material-templates/table-header-material) :render template-name-render :sortable? true}\n              {:key :material-template/unit :label (tr/tr :material-templates/table-header-unit) :sortable? true\n               :cell-style {:color \"#374151\" :font-weight \"500\" :font-size \"0.875rem\"}}\n              {:key :material-template/category :label (tr/tr :material-templates/table-header-category) :render category-render :sortable? true\n               :cell-style {:color \"#6b7280\" :font-size \"0.875rem\"}}]\n    :data-source templates-data\n    :data-key :material-templates\n    :loading? loading?\n    :empty-message (tr/tr :material-templates/no-templates-found)\n    :id-key :material-template/id\n    :table-id :material-templates-table\n    :show-search? true\n    :show-pagination? true\n    :query-fn query-fn\n    :actions [{:key :edit :label (tr/tr :material-templates/action-edit) :variant :primary :href on-edit}\n              {:key :delete :label (tr/tr :material-templates/action-delete) :variant :danger \n               :on-click (fn [row] \n                          (when (js/confirm (tr/tr :material-templates/confirm-delete))\n                            (on-delete (:material-template/id row))))}]}])\n\n(defn- templates-page-header\n  \"Page header with title and add button using new UI component\"\n  [modal-template modal-is-new?]\n  [page-header/page-header\n   {:title (tr/tr :material-templates/page-title)\n    :description (tr/tr :material-templates/page-description)\n    :action-button [enhanced-button/enhanced-button\n                    {:variant :success\n                     :on-click (fn [] \n                                (reset! modal-template {})\n                                (reset! modal-is-new? true))\n                     :text (tr/tr :material-templates/add-new-template)}]}])\n\n(defn- templates-content\n  \"Main content area with server-side data table\"\n  [templates-data-atom loading?-atom modal-template modal-is-new? delete-template query-fn]\n  [material-templates-table \n   @templates-data-atom\n   @loading?-atom\n   (fn [template]\n     (let [workspace-id (get-workspace-id)\n           template-id (:material-template/id template)]\n       (str \"/app/\" workspace-id \"/material-templates/\" template-id)))\n   delete-template\n   query-fn])\n\n(defn- modal-when-open\n  \"Render modal when template is selected\"\n  [modal-template modal-is-new? save-template]\n  (when @modal-template\n    [material-template-modal @modal-template @modal-is-new? save-template\n     (fn [] (reset! modal-template nil))]))\n\n;; Re-frame subscriptions and events\n(rf/reg-sub\n  :material-templates/data\n  (fn [db _]\n    (let [raw-data (get-in db [:material-templates :data])\n          _ (println \"DEBUG: subscription raw-data:\" raw-data)]\n      (if (and raw-data (:material-templates raw-data))\n        ;; If we have the old structure, use it as is\n        raw-data\n        ;; Otherwise return default structure\n        {:material-templates [] :pagination {}}))))\n\n(rf/reg-sub\n  :material-templates/loading?\n  (fn [db _]\n    (get-in db [:material-templates :loading?] false)))\n\n(rf/reg-event-db\n  :material-templates/set-loading\n  (fn [db [_ loading?]]\n    (assoc-in db [:material-templates :loading?] loading?)))\n\n(rf/reg-event-db\n  :material-templates/load-success\n  (fn [db [_ data]]\n    (-> db\n        (assoc-in [:material-templates :data] data)\n        (assoc-in [:material-templates :loading?] false))))\n\n\n(defn view []\n  (let [workspace-id (get-workspace-id)\n        loading? (r/atom false)\n        modal-template (r/atom nil)\n        modal-is-new? (r/atom false)\n        \n        templates-data-atom (r/atom {:material-templates [] :pagination {}})\n        \n        load-templates (fn [params]\n                         (println \"DEBUG: load-templates called with params:\" params)\n                         (println \"DEBUG: workspace-id:\" workspace-id)\n                         (reset! loading? true)\n                         (parquery/send-queries\n                          {:queries {:workspace-material-templates/get-paginated (or params {})}\n                           :parquery/context {:workspace-id workspace-id}\n                           :callback (fn [response]\n                                      (println \"DEBUG: load-templates response:\" response)\n                                      (reset! loading? false)\n                                      (let [result (:workspace-material-templates/get-paginated response)\n                                            formatted-result {:material-templates (:material-templates result)\n                                                            :pagination {:total-count (:total-count result)\n                                                                       :page (:page result) \n                                                                       :page-size (:page-size result)\n                                                                       :total-pages (:total-pages result)}}]\n                                        (println \"DEBUG: formatted result:\" formatted-result)\n                                        (reset! templates-data-atom formatted-result)))}))\n        \n        save-template (fn [template callback]\n                        (save-template-query template workspace-id modal-is-new? \n                                             callback modal-template (fn [] (load-templates {}))))\n        \n        delete-template (fn [template-id]\n                          (delete-template-query template-id workspace-id (fn [] (load-templates {}))))]\n    \n    \n    ;; Initial load\n    (println \"DEBUG: Material templates view function called - NEW VERSION\")\n    (zero-react/use-effect\n      {:mount (fn []\n                (println \"DEBUG: Initial load triggered\")\n                (load-templates {}))\n       :params #js []})\n    \n    [:div {:style {:min-height \"100vh\" :background \"#f9fafb\"}}\n     [:div {:style {:max-width \"1200px\" :margin \"0 auto\" :padding \"2rem\"}} \n      [templates-page-header modal-template modal-is-new?]\n      [templates-content templates-data-atom loading? modal-template modal-is-new? delete-template load-templates]\n      [modal-when-open modal-template modal-is-new? save-template]]]))\n\n(defn- get-template-id\n  \"Get material template ID from router parameters\"\n  []\n  (let [router-state @router/state\n        template-id (get-in router-state [:parameters :path :material-template-id])]\n    template-id))\n\n(defn- load-individual-template\n  \"Load individual template data\"\n  [template-id workspace-id callback]\n  (parquery/send-queries\n   {:queries {:workspace-material-templates/get-by-id {:material-template/id template-id}}\n    :parquery/context {:workspace-id workspace-id}\n    :callback callback}))\n\n(defn- individual-template-form\n  \"Form component for individual template editing\"\n  [template loading? errors on-save on-cancel]\n  [:div {:style {:background \"white\" :padding \"2rem\" :border-radius \"12px\" \n                 :box-shadow \"0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)\"}}\n   [:div {:style {:margin-bottom \"2rem\"}}\n    [:h2 {:style {:font-size \"1.5rem\" :font-weight \"700\" :color \"#111827\" :margin-bottom \"0.5rem\"}}\n     (tr/tr :material-templates/modal-edit-title)]\n    [:p {:style {:color \"#6b7280\" :font-size \"0.875rem\"}}\n     (tr/tr :material-templates/modal-edit-subtitle)]]\n   \n   [form-fields template @errors]\n   \n   [:div {:style {:display \"flex\" :gap \"1rem\" :justify-content \"flex-end\" :margin-top \"2rem\"}}\n    [enhanced-button/enhanced-button\n     {:variant :secondary\n      :on-click on-cancel\n      :text (tr/tr :material-templates/cancel)}]\n    [enhanced-button/enhanced-button\n     {:variant :primary\n      :loading? @loading?\n      :on-click #(handle-save-click template loading? errors on-save)\n      :text (if @loading? (tr/tr :material-templates/saving) (tr/tr :material-templates/save-template))}]]])\n\n(defn individual-view\n  \"Individual material template edit view\"\n  []\n  (let [template-id (get-template-id)\n        workspace-id (get-workspace-id)\n        loading? (r/atom true)\n        saving? (r/atom false)\n        errors (r/atom {})\n        template (r/atom {})\n        \n        save-template (fn [template-data callback]\n                        (save-template-query template-data workspace-id (r/atom false) \n                                             callback (r/atom nil) \n                                             (fn [] (router/navigate! (str \"/app/\" workspace-id \"/material-templates\")))))\n        \n        handle-save (fn [template-data callback]\n                      (reset! saving? true)\n                      (save-template template-data \n                                     (fn [] \n                                       (reset! saving? false)\n                                       (callback))))\n        \n        handle-cancel (fn []\n                        (router/navigate! (str \"/app/\" workspace-id \"/material-templates\")))]\n    \n    ;; Load template data\n    (zero-react/use-effect\n      {:mount (fn []\n                (when (and template-id workspace-id)\n                  (load-individual-template \n                   template-id workspace-id \n                   (fn [response]\n                     (reset! loading? false)\n                     (let [template-data (:workspace-material-templates/get-by-id response)]\n                       (if template-data\n                         (reset! template template-data)\n                         (js/alert \"Template not found\")))))))\n       :params #js [template-id workspace-id]})\n    \n    [:div {:style {:min-height \"100vh\" :background \"#f9fafb\"}}\n     [:div {:style {:max-width \"800px\" :margin \"0 auto\" :padding \"2rem\"}}\n      (if @loading?\n        [:div {:style {:text-align \"center\" :padding \"4rem\"}}\n         [:div {:style {:color \"#6b7280\"}} \"Loading template...\"]]\n        [individual-template-form template saving? errors handle-save handle-cancel])]]))"]}
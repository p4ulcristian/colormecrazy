{"version":3,"sources":["ui/header.cljs"],"mappings":";AASA,IAAAA,iBAAA;IAAAC,iBAEC,cAAAE,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;eAAT,AAAAF,4CAAAD,WAAA,IAAA,tEAAWI;AAAX,AACE,yGAAA,zGAACC,mKAAkED;;AACnE,IAAME,aAAW,sBAAA,mFAAA,wDAAA,jKAACC,mBAASL,oNAAuBE;AAAlD,AACE,yGAAA,zGAACC,6IAA4C,0DAAA,mFAAA,7IAACG,+CAAOF;;AACrDA;;AANL,AAAA,uIAAAV,eAAAC,gEAAAD,eAAAC,pOAACC,oEAAAA,mGAAAA;AAQD,IAAAW,iBAAA;IAAAC,iBAEC,WAAKR,GAAGC;AAAR,AACE,IAAMS,eAAa,kDAAA,mFAAA,wDAAA,sEAAA,nQAACJ,+CAAON;AAA3B,AACE,yGAAA,zGAACG,mKAAkEO;;AACnEA;;AALL,AAAA,6HAAAH,eAAAC,2DAAAD,eAAAC,rNAACC,+DAAAA,8FAAAA;AAUD,IAAAE,iBAAA,mFAAA,gFAAA;AAAA,AAAA,+HAAAA,4DAAAA,1LAACC,gEAAAA,gFAAAA;AAGD,6BAAA,7BAAOC;AAAP,AAAA;AAEE,sDAAA,AAAAC,4CAAA,mFAAA,kEAAA,qDAAA,rSAACR,+DAAQS;;AAEX,8BAAA,9BAAMC;AAAN,AAAA;AAEE,IAAAC,qBAAwB,AAACJ;AAAzB,AAAA,oBAAAI;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AACE,2CAAA,2CAAA,/EAACC,oIAAwB,CAAA,oDAAaD;;AADxC;;;AAIF,0BAAA,1BAAME;AAAN,AAAA;AAEE,8CAAA,2CAAA,2DAAA,2CAAA,kEAAA,2CAAA,rSAACC,kWAEY,WAAKC;AAAL,AACE,OAAA,yFAAU,AAAA,gGAAeA;;;AAE1C,mCAAA,nCAAMC,8EAAwBC;AAA9B,AAAA;AAEE,IAAMC,eAAa,iHAAA,kDAAA,jKAAI,8DAAA,9DAACC,6CAAEF;AAA1B,AACE,yGAAA,iDAAA,1JAACrB,yIAAwCqB,sBAAsBC;;AAC/D,IAAAE,iBAAA,mFAAA,gFAAmCF;AAAnC,AAAA,+HAAAE,4DAAAA,1LAACf,gEAAAA,gFAAAA;;AACD,gHAAA,zGAACT;;AAEL;;;4BAAA,5BAAMyB;AAAN,AAGE,IAAMJ,mBAAiB,iBAAAK,WAAA,mFAAA;AAAA,AAAA,wIAAAA,uDAAAA,vLAACC,iEAAAA,2EAAAA;;AAAxB,AAAA,0FAAA,mFAAA,kGAAA,2CAAA,qDAAA,+DAAA,wDAAA,sBAAA,6DAAA,zTAEIC;AAFJ,AAKgB,wCAAA,AAAAjB,jCAACS,iDAAwBC;WACrC,kIAAA,KAAA,rIAAI,6CAAA,AAAAV,kCAAA,/EAACY,6DAAGF;;AAEd;;;mBAAA,nBAAMQ;AAAN,AAAA,0FAAA,+EAAA,mFAAA,iFAAA,mFAAA,0EAAA,2CAAA,yFAAA,uDAAA,2CAAA,yDAAA,UAAA,0DAAA,OAAA,mEAAA,yBAAA,mFAAA,8DAAA,2CAAA,oDAAA,sBAAA,iDAAA,uBAAA,mFAAA,oLAAA,mFAAA,6EAAA,kGAAA,2CAAA,qDAAA,+DAAA,qFAAA,wDAAA,qBAAA,AAAAlB,t/CAMgBE,20BAGO,qBAAA,rBAACiB,2VAElBF,2OAEWX,qHAEV,iBAAAc,WAAA,mFAAA,+DAAA;AAAA,AAAA,wIAAAA,uDAAAA,vLAACJ,iEAAAA,2EAAAA;cAfR,mFAgBMF;;AAEN;;;iBAAA,jBAAMO;AAAN,AAAA,0FAGGH","names":["G__16514","G__16515","zero.frontend.re-frame/reg-event-db","p__16518","vec__16519","cljs.core.nth","db","_","language","cljs.core.println","updated-db","cljs.core/assoc-in","cljs.core.get_in","G__16522","G__16523","zero.frontend.re-frame/reg-sub","current-lang","G__16524","zero.frontend.re-frame/dispatch","ui.header/get-workspace-id","cljs.core/deref","router.frontend.zero/state","ui.header/handle-logo-click","temp__5823__auto__","workspace-id","router.frontend.zero/navigate!","ui.header/handle-logout","parquery.frontend.request/send-queries","response","ui.header/handle-language-toggle","current-language","new-language","cljs.core._EQ_","G__16542","ui.header/language-toggle","G__16547","zero.frontend.re-frame/subscribe","ui.button/view","ui.header/header","translations.core/tr","G__16559","ui.header/view"],"sourcesContent":["(ns ui.header\n  (:require\n   [ui.button :as button]\n   [zero.frontend.re-frame :as rf]\n   [parquery.frontend.request :as parquery]\n   [router.frontend.zero :as router]\n   [translations.core :as tr]))\n\n;; Re-frame events and subscriptions\n(rf/reg-event-db\n :header/set-language\n (fn [db [_ language]]\n   (println \"DEBUG: re-frame event :header/set-language called with:\" language)\n   (let [updated-db (assoc-in db [:header :language] language)]\n     (println \"DEBUG: Updated db header section:\" (get-in updated-db [:header]))\n     updated-db)))\n\n(rf/reg-sub\n :header/current-language\n (fn [db _]\n   (let [current-lang (get-in db [:header :language] :hu)]\n     (println \"DEBUG: subscription :header/current-language returning:\" current-lang)\n     current-lang)))\n\n\n\n;; Initialize default language\n(rf/dispatch [:header/set-language :hu])\n\n;; Navigation helpers\n(defn- get-workspace-id []\n  \"Get workspace ID from router parameters\"\n  (get-in @router/state [:parameters :path :workspace-id]))\n\n(defn handle-logo-click []\n  \"Navigate to workspace dashboard when logo/title is clicked\"\n  (when-let [workspace-id (get-workspace-id)]\n    (router/navigate! {:path (str \"/app/\" workspace-id)})))\n\n;; Event handlers\n(defn handle-logout []\n  \"Handle user logout\"\n  (parquery/send-queries\n    {:queries {:users/logout {}}\n     :callback (fn [response]\n                 (:success (:users/logout response)))}))\n\n(defn handle-language-toggle [current-language]\n  \"Toggle language between en and hu\"\n  (let [new-language (if (= current-language :en) :hu :en)]\n    (println \"DEBUG: Toggling language from\" current-language \"to\" new-language)\n    (rf/dispatch [:header/set-language new-language])\n    (println \"DEBUG: Dispatched event\")))\n\n(defn language-toggle\n  \"Language toggle between English and Hungarian\"\n  []\n  (let [current-language (rf/subscribe [:header/current-language])]\n    [:div.language-toggle\n     [button/view \n      {:type :secondary\n       :class \"language-toggle-btn\"\n       :on-click #(handle-language-toggle @current-language)}\n      (if (= @current-language :en) \"EN\" \"HU\")]]))\n\n(defn header\n  \"Main application header with logo, language toggle, and logout button\"\n  []\n  [:header.app-header\n   [:div.header-content\n    [:div.header-left\n     {:on-click handle-logo-click\n      :style {:cursor \"pointer\" :display \"flex\" :align-items \"center\"}}\n     [:img.logo {:src \"/logo/logo-256.webp\" :alt \"Logo\"}]\n     [:span.brand-name (tr/tr :header/brand)]]\n    [:div.header-right\n     [button/view \n      {:type :secondary\n       :on-click handle-logout\n       :class \"logout-btn\"}\n      @(rf/subscribe [:translate :header/logout])]\n     [language-toggle]]]])\n\n(defn view\n  \"Header component view function\"\n  []\n  [header])"]}
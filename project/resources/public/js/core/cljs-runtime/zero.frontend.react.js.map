{"version":3,"sources":["zero/frontend/react.cljs"],"mappings":";AAGA,gCAAA,hCAAMA,wEAAWC;AAAjB,AACC,OAACC,qCAAeD;;AAEjB,iCAAA,yCAAAE,1EAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAA0BI;cAA1B,AAAAF,4CAAAF,eAAA,rEAAgCK;aAAhC,AAAAH,4CAAAF,eAAA,pEAAwCM;AAAxC,AACE,OAACC,sCACA;AAAA,AACE,oBAAMH;AAAN,AAAY,CAACA,sCAAAA,wCAAAA;;AAAb;;AACA,oBAAIC;AACF;AAAA,AAAO,QAACA,wCAAAA,0CAAAA;;;AACR;AAAA,AAAA;;;GACJ,iCAAA,fAAIC,QAAOA","names":["zero.frontend.react/use-state","initial-value","js/shadow.js.shim.module$react.useState","p__28224","map__28225","cljs.core/--destructure-map","cljs.core.get","zero.frontend.react/use-effect","mount","unmount","params","js/shadow.js.shim.module$react.useEffect"],"sourcesContent":["(ns zero.frontend.react\n  (:require [\"react\" :as react]))\n\n(defn use-state [initial-value]\n (react/useState initial-value))\n\n(defn use-effect [{:keys [mount unmount params]}]\n  (react/useEffect\n   (fn []\n     (when mount (mount))\n     (if unmount\n       (fn [] (unmount))\n       (fn [])))\n   (if params params #js[])))"]}